#include<stdio.h>
#include<conio.h>
float lcost [100],a[100][100];
int closest [100],i,j,k,min,n,c=0;
void get_mat()
{
    printf("\nenter the no. of vertices:\n");
    scanf("%d",&n);
    //printf("\nenter 1000 for no path\n");
    printf("\nenter weighted matrix\n");
    for(i=1;i<=n;i++)   
    {
        for(j=1;j<=n;j++)
        {
            printf("cost betweeen the edge\t%d,%d:\t",i,j);
            scanf("%f",&a[i][j]);
        }
    }
}
void prim1()
{
    for(i=2;i<=n;i++)
    {
        lcost[i]=a[1][i];
        closest[i]=1;
    }
    printf("minimum cost spanning tree edges are\n");
    for(i=2;i<=n;i++)
    {
        min=lcost[2];
        k=2;
        for(j=3;j<=n;j++)
        {
            if(lcost[j])
            {
                min=lcost[j];
                k=j;
            }
            
        }
        c=c+min;
        printf("(%d,%d)\tcost=%d\t",closest[k],k,min);
        lcost[k]=2000;
        for(j=2;j<=n;j++)
        {
            if((a[k][j]<2000))
            {
                lcost[j]=a[k][j];
                closest[j]=k;
            }               
            printf("\n");
        }
        
    }
    printf("\n\n weight of minimum cost spanning tree:%d",c);
    getch();
}
void main()
{ 
    int ch;
    clrscr();
    do
    {
        printf("\n1.get\n2.find path with minimum cost\n3.exit\n enter ur choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
            get_mat();
            break;
            case 2:
            prim1();
            break;
            case 3:
            exit(0);
            break;
        }
        
    }
    while(ch<=3);
    getch();
}
